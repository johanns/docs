var search_data = {"index":{"searchIndex":["sha3","digest","digesterror","sha3_224","sha3_256","sha3_384","sha3_512","shake_128","shake_256","kmac","kmacerror","<<()","<<()","block_length()","digest()","digest()","digest()","digest()","digest_length()","finish()","finish()","hex_squeeze()","hexdigest()","hexdigest()","hexdigest()","hexdigest()","initialize_copy()","initialize_copy()","name()","name()","new()","new()","reset()","squeeze()","update()","update()","license","readme"],"longSearchIndex":["sha3","sha3::digest","sha3::digest::digesterror","sha3::digest::sha3_224","sha3::digest::sha3_256","sha3::digest::sha3_384","sha3::digest::sha3_512","sha3::digest::shake_128","sha3::digest::shake_256","sha3::kmac","sha3::kmac::kmacerror","sha3::digest#<<()","sha3::kmac#<<()","sha3::digest#block_length()","sha3::digest::digest()","sha3::digest#digest()","sha3::kmac::digest()","sha3::kmac#digest()","sha3::digest#digest_length()","sha3::digest#finish()","sha3::kmac#finish()","sha3::digest#hex_squeeze()","sha3::digest#hexdigest()","sha3::digest::hexdigest()","sha3::kmac#hexdigest()","sha3::kmac::hexdigest()","sha3::digest#initialize_copy()","sha3::kmac#initialize_copy()","sha3::digest#name()","sha3::kmac#name()","sha3::digest::new()","sha3::kmac::new()","sha3::digest#reset()","sha3::digest#squeeze()","sha3::digest#update()","sha3::kmac#update()","",""],"info":[["SHA3","","SHA3.html","","<p>This module provides implementations of the SHA-3 family of cryptographic hash functions and the SHAKE …\n"],["SHA3::Digest","","SHA3/Digest.html","","<p>It is a subclass of the Digest::Class class, which provides a framework for creating and manipulating …\n"],["SHA3::Digest::DigestError","","SHA3/Digest/DigestError.html","","<p>All SHA3::Digest methods raise this exception on error.\n<p>It is a subclass of the StandardError class – …\n"],["SHA3::Digest::SHA3_224","","SHA3/Digest/SHA3_224.html","","<p>SHA3_224 is a cryptographic hash function that produces a 224-bit (28-byte) hash value.\n<p>Usage:\n\n<pre>digest = ...</pre>\n"],["SHA3::Digest::SHA3_256","","SHA3/Digest/SHA3_256.html","","<p>SHA3_256 is a cryptographic hash function that produces a 256-bit (32-byte) hash value.\n<p>Usage:\n\n<pre>digest = ...</pre>\n"],["SHA3::Digest::SHA3_384","","SHA3/Digest/SHA3_384.html","","<p>SHA3_384 is a cryptographic hash function that produces a 384-bit (48-byte) hash value.\n<p>Usage:\n\n<pre>digest = ...</pre>\n"],["SHA3::Digest::SHA3_512","","SHA3/Digest/SHA3_512.html","","<p>SHA3_512 is a cryptographic hash function that produces a 512-bit (64-byte) hash value.\n<p>Usage:\n\n<pre>digest = ...</pre>\n"],["SHA3::Digest::SHAKE_128","","SHA3/Digest/SHAKE_128.html","","<p>SHAKE_128 is an extendable-output function (XOF) that can produce hash values of any desired length. …\n"],["SHA3::Digest::SHAKE_256","","SHA3/Digest/SHAKE_256.html","","<p>SHAKE_256 is an extendable-output function (XOF) that can produce hash values of any desired length. …\n"],["SHA3::KMAC","","SHA3/KMAC.html","","<p>It is a subclass of the Digest::Class class, which provides a framework for creating and manipulating …\n"],["SHA3::KMAC::KMACError","","SHA3/KMAC/KMACError.html","","<p>All KMAC methods raise this exception on error.\n<p>It is a subclass of the StandardError class – see the …\n"],["<<","SHA3::Digest","SHA3/Digest.html#method-i-3C-3C","(p1)","<p>Updates the digest with the given string.\n<p><code>string</code> &mdash; The string to update the digest with.\n\n<p>example\n"],["<<","SHA3::KMAC","SHA3/KMAC.html#method-i-3C-3C","(p1)","<p>Updates the KMAC with the given string.\n<p><code>string</code> &mdash; The string to update the KMAC with.\n\n<p>example\n"],["block_length","SHA3::Digest","SHA3/Digest.html#method-i-block_length","()","<p>Returns the block length of the algorithm in bytes.\n<p>example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">digest</span>.<span class=\"ruby-identifier\">block_length</span>\n</pre>\n"],["digest","SHA3::Digest","SHA3/Digest.html#method-c-digest","(p1, p2)","<p>Returns the binary digest of the given <code>data</code> using the algorithm specified by <code>name</code>.\n<p><code>name</code> &mdash; The hash algorithm …\n"],["digest","SHA3::Digest","SHA3/Digest.html#method-i-digest","(p1 = v1, p2 = v2)","<p>Returns the binary representation of the digest.\n<p><code>length</code> &mdash; The length of the output to squeeze when using …\n"],["digest","SHA3::KMAC","SHA3/KMAC.html#method-c-digest","(p1, p2, p3, p4, p5 = v5)","<p>One-shot operation to return the binary KMAC digest without explicitly creating an instance.\n<p><code>algorithm</code> … &mdash; "],["digest","SHA3::KMAC","SHA3/KMAC.html#method-i-digest","(p1 = v1)","<p>Returns the binary representation of the KMAC. This method creates a copy of the current instance so …\n"],["digest_length","SHA3::Digest","SHA3/Digest.html#method-i-digest_length","()","<p>Returns the length of the digest in bytes.\n<p>example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">digest</span>.<span class=\"ruby-identifier\">length</span>  <span class=\"ruby-comment\">#=&gt; 32 for SHA3-256</span>\n</pre>\n"],["finish","SHA3::Digest","SHA3/Digest.html#method-i-finish","(p1 = v1)","<p>Returns the final digest as a binary string.\n<p><code>message</code> &mdash; <em>optional</em> Update state with additional data before …\n\n"],["finish","SHA3::KMAC","SHA3/KMAC.html#method-i-finish","(p1 = v1)","<p>Returns the final KMAC as a binary string.\n<p><code>message</code> &mdash; <em>optional</em> Output buffer to receive the final KMAC value. …\n\n"],["hex_squeeze","SHA3::Digest","SHA3/Digest.html#method-i-hex_squeeze","(p1)","<p>Returns the hexadecimal representation of the squeezed output. Only available for SHAKE algorithms.\n<p><code>length</code> … &mdash; "],["hexdigest","SHA3::Digest","SHA3/Digest.html#method-i-hexdigest","(p1 = v1, p2 = v2)","<p>Returns the hexadecimal representation of the digest.\n<p><code>length</code> &mdash; The length of the output to squeeze when …\n"],["hexdigest","SHA3::Digest","SHA3/Digest.html#method-c-hexdigest","(p1, p2)","<p>Returns the hexadecimal representation of the given <code>data</code> using the algorithm specified by <code>name</code>.\n<p><code>name</code> &mdash; "],["hexdigest","SHA3::KMAC","SHA3/KMAC.html#method-i-hexdigest","(*args)","<p>Returns the hexadecimal representation of the KMAC. This method creates a copy of the current instance …\n"],["hexdigest","SHA3::KMAC","SHA3/KMAC.html#method-c-hexdigest","(p1, p2, p3, p4, p5 = v5)","<p>One-shot operation to return the hexadecimal KMAC digest without explicitly creating an instance.\n<p><code>algorithm</code> … &mdash; "],["initialize_copy","SHA3::Digest","SHA3/Digest.html#method-i-initialize_copy","(p1)","<p>Initializes the digest with the state of another digest.\n<p><code>other</code> &mdash; The digest to copy the state from.\n\n<p>example …\n"],["initialize_copy","SHA3::KMAC","SHA3/KMAC.html#method-i-initialize_copy","(p1)","<p>Initializes the KMAC with the state of another KMAC.\n<p><code>other</code> &mdash; The KMAC to copy the state from.\n\n<p>example\n"],["name","SHA3::Digest","SHA3/Digest.html#method-i-name","()","<p>Returns the name of the algorithm.\n<p>example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">digest</span>.<span class=\"ruby-identifier\">name</span>  <span class=\"ruby-comment\">#=&gt; &quot;SHA3-256&quot;</span>\n</pre>\n"],["name","SHA3::KMAC","SHA3/KMAC.html#method-i-name","()","<p>Returns the name of the algorithm.\n<p>example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">kmac</span>.<span class=\"ruby-identifier\">name</span>  <span class=\"ruby-comment\">#=&gt; &quot;KMAC128&quot; or &quot;KMAC256&quot;</span>\n</pre>\n"],["new","SHA3::Digest","SHA3/Digest.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new digest object.\n<p><code>algorithm</code> &mdash; <em>optional</em> The algorithm to use. Valid algorithms are:\n<p>:sha3_224\n"],["new","SHA3::KMAC","SHA3/KMAC.html#method-c-new","(p1, p2, p3, p4 = v4)","<p>Creates a new KMAC object.\n<p><code>algorithm</code> &mdash; The KMAC algorithm to use (as a Symbol). Valid algorithms are:\n<p>:kmac_128 …\n"],["reset","SHA3::Digest","SHA3/Digest.html#method-i-reset","()","<p>Resets the digest to its initial state.\n<p>example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">digest</span>.<span class=\"ruby-identifier\">reset</span>\n</pre>\n"],["squeeze","SHA3::Digest","SHA3/Digest.html#method-i-squeeze","(p1)","<p>Returns the squeezed output as a binary string. Only available for SHAKE algorithms. This method creates …\n"],["update","SHA3::Digest","SHA3/Digest.html#method-i-update","(p1)","<p>Updates the digest with the given string.\n<p><code>string</code> &mdash; The string to update the digest with.\n\n<p>example\n"],["update","SHA3::KMAC","SHA3/KMAC.html#method-i-update","(p1)","<p>Updates the KMAC with the given string.\n<p><code>string</code> &mdash; The string to update the KMAC with.\n\n<p>example\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2025 Johanns Gregorian\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>SHA3 for Ruby\n<p><img src=\"https://badge.fury.io/rb/sha3.svg\"> <img src=\"https://github.com/johanns/sha3/actions/workflows/main.yml/badge.svg\"> …\n"]]}}